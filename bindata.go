// Code generated by go-bindata.
// sources:
// bash/gh-release.bash
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bashGhReleaseBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdf\x6f\xdb\x36\x10\x7e\x96\xfe\x8a\xc3\x4d\x6d\xed\x61\xb2\xb0\x6e\x4f\x76\x12\x34\x73\x8d\x35\x58\xd1\x14\xb1\xb3\x15\xf0\x0c\x83\x96\x28\x89\x2b\x45\x0a\x24\x65\xcc\x4b\xfd\xbf\x0f\x94\x48\xc9\xf9\xf1\xd0\x2d\x7d\xb3\xc8\xbb\xef\xbe\xef\xee\xe3\x39\x54\x94\x64\x52\xf0\x03\x28\x9a\x6f\xa9\xc8\x6a\xc9\x84\x39\xc7\xe8\xee\xd7\xab\xd5\xbb\xdb\x5f\xb6\x97\x1f\xaf\xb6\xb7\x37\xef\xa7\x71\x69\x4c\xad\xa7\x49\x42\x6a\x36\x29\x98\x29\x9b\xdd\x24\x95\xd5\x31\x51\xb4\x96\x3a\x79\xa1\x93\x82\x99\x44\xd1\x5c\x27\x86\x14\xf6\x00\x4f\xb1\x39\x25\x9a\x3e\x0f\xdf\x81\x3c\x85\xfb\x97\x96\xe2\xfc\xd5\x1d\x1a\x52\x6c\x05\xa9\x28\x4e\x01\xf7\x2f\x34\xfe\x00\xe8\x3f\xbb\x2f\x43\x54\x41\xcd\x36\x95\x55\xc5\x0c\xd3\xa5\xbb\x39\xbe\x0a\x43\x87\x15\xa7\x8a\x12\x43\x47\x63\xb8\x0b\x83\x8c\xa6\x9c\x28\x0a\x96\x83\x05\x3a\xc7\xe8\x47\x84\x3d\x55\x9a\x49\x61\x45\xbc\xfe\x6e\x7f\x44\xd8\x29\x22\xd2\xd2\x7e\xff\x34\x8d\x2b\xa2\x0d\x55\x47\x04\x97\xf0\x33\x86\x01\x97\x29\xe1\x9e\xed\x39\x46\xa3\x5a\x31\x61\x72\xc0\xe8\x54\x01\x02\x46\x0e\xdb\xfe\x6c\x99\x03\x46\x1d\x3a\x8e\x1f\xe2\x6c\x1b\xc5\x9f\xc4\xf2\x5d\xc6\xf6\xac\x63\xde\xa6\xd3\xb4\x94\x80\x73\x2b\x90\x89\xc2\xe3\xc0\xde\x57\x85\x5c\xc9\xca\xa9\x01\x57\x17\x26\x93\x09\x86\x41\x53\x73\x49\x32\x5f\x32\x6d\x14\x87\x58\x43\xfc\x0e\xf0\xb2\x31\xa5\x54\xec\x1f\x62\x98\x14\x53\x30\xf2\x33\x15\x10\xf9\xe9\xce\xe7\x8b\xe5\x72\xbb\xba\xfe\x6d\xf1\x01\x21\xce\x06\x96\x78\x42\xb8\x51\x1c\xe1\x0b\x74\x35\xe2\x46\x71\x4b\x36\x97\x0a\x88\xd6\xd4\x00\x13\x10\x8d\xb8\x86\xf8\xd2\x53\x1e\xcf\x20\x93\x61\xe0\xfa\xe1\x1a\x3d\xda\x11\x4d\xed\x6f\x88\xda\x3c\x0b\xe2\x24\xdf\xb6\xc8\x56\x73\xdb\x55\xa7\x29\xe8\x64\x7c\x82\x8f\xd7\xcb\x55\xab\x65\x2e\x85\xa1\xc2\xc4\xab\x43\x4d\xa7\x10\x8d\x2a\x56\x51\x73\xa8\x69\x97\x36\xc6\xff\x2c\x38\xce\x88\x21\xf1\x8e\x09\xa2\x0e\x80\x6f\x1c\xfd\xa4\x23\x88\xf0\x67\x18\x04\x01\x46\x27\xcd\x75\x53\xbf\x80\x24\xa3\xfb\x44\x34\x9c\x87\x41\x26\x05\x0d\x8f\x83\x43\x33\xaa\x8d\x92\x87\xaf\xb3\xe8\xeb\x67\xdb\x26\x0c\x7a\xb4\xde\x29\xf6\xd4\xe7\xb1\xec\x19\x96\x78\x64\x02\x2f\x92\x65\xb1\x75\x63\x6c\x48\xd1\x8e\x6c\x78\x1a\x83\x93\xdf\x52\x4e\x4f\x9d\xdc\x8d\xf5\xff\x9a\xf3\x13\xbc\x5d\xbc\x5f\xac\x16\xf7\x39\x25\xd1\xa0\xf3\x71\x61\x43\x8a\xae\xa8\xdd\x3c\x8f\x1b\x9b\x3f\xdd\xd4\x07\x62\xbe\x01\x61\x57\x1e\xad\x4d\x1a\x4d\x0a\xb7\xbf\x9c\xfb\xed\xc1\x14\x8a\x32\xf6\x2f\x7e\x1d\xef\x37\xa0\x9b\x9d\xdd\x83\x44\x78\x5d\x3e\x7e\xd9\x5f\xe8\x69\x2f\x19\xa0\x5b\x8c\x70\xe6\x65\x5c\xc0\x99\x53\x71\x01\xeb\x6e\x59\x6c\x60\x6d\x6f\x36\x27\x59\xce\xac\x4f\xa6\x9d\x82\x97\x34\xfd\xac\x9b\x4a\xc3\x19\xe1\x85\x54\xcc\x94\x95\xbf\x3f\xf5\x7e\x1f\x77\xdf\xfd\x84\x17\xad\xf1\x3d\xe0\x1f\x8a\xb5\xf3\x89\x08\x2f\x7a\x6c\xc8\x19\xa7\xba\x9b\xd7\xd7\x6c\x97\x94\x18\xc0\x87\x4f\xf6\xcb\x00\x87\x16\xdd\xbe\xd5\x21\xe8\xae\x8d\x3a\x4e\xda\x9b\xe1\xe5\x56\x84\x89\x8e\xb0\xad\x18\x53\x09\x35\xab\x69\x4e\x18\x9f\xc1\x7a\x0d\x18\xad\x6e\x2e\xe7\x0b\x84\xcd\x06\x5e\xbe\x84\x36\xe6\xef\x30\x48\xed\xa8\xda\xe7\xcc\x84\xa5\xd3\xf6\x7f\x1c\x04\xba\x64\xb9\x99\xc1\xfd\x3f\x2c\xc0\xe8\x0d\xce\x66\x61\x10\xb8\x8e\x8f\x1f\xc6\xf9\x49\xf4\x81\x7d\x2f\x1f\x85\x0e\xd3\xe8\x83\xe3\xfd\x38\xf0\xeb\x34\xfa\x7d\x71\xb3\xbc\xba\xfe\xd0\xdd\x7c\x6f\x2f\x5a\xd3\xd9\x4f\xaa\x49\x1a\x1e\xc3\x7f\x03\x00\x00\xff\xff\x83\xc5\xca\x92\x58\x08\x00\x00")

func bashGhReleaseBashBytes() ([]byte, error) {
	return bindataRead(
		_bashGhReleaseBash,
		"bash/gh-release.bash",
	)
}

func bashGhReleaseBash() (*asset, error) {
	bytes, err := bashGhReleaseBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bash/gh-release.bash", size: 2136, mode: os.FileMode(493), modTime: time.Unix(1612688600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bash/gh-release.bash": bashGhReleaseBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bash": &bintree{nil, map[string]*bintree{
		"gh-release.bash": &bintree{bashGhReleaseBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

